@startuml TfGM-API-Wrapper
skinparam classFontColor automatic

'Models.RoutePlanner'
package Models.RoutePlanner {
Models.Resources.RouteLoader *-- Models.RoutePlanner.UnprocessedRoute
Models.RoutePlanner.RoutePlanner *-- Models.RoutePlanner.PlannedRoute
Models.RoutePlanner.RoutePlanner *-- Models.RoutePlanner.Route
Models.RoutePlanner.RoutePlanner *-- Models.RoutePlanner.RouteNotPossibleException
Models.RoutePlanner.RoutePlannerDataModel *-- Models.Stops.StopLookup
Models.RoutePlanner.RoutePlannerDataModel *-- Models.RoutePlanner.RoutePlanner
Models.RoutePlanner.RoutePlanner "Implements" --|> Models.RoutePlanner.IRoutePlanner
}

class Models.RoutePlanner.RoutePlannerDataModel #Purple {
Data Model for Route planning requests
---
+ RoutePlannerDataModel(ImportedResources importedResources, IRoutePlanner routePlanner)
---
+ FindRoute(string origin, string destination): List<PlannedRoute>
}

class Models.RoutePlanner.Route #Purple {
Stores the information about a single Route
---
+ Route(string name, string colour, List<Stop> stops)
---
+ GetStopsBetween(Stop start, Stop destination): List<Stop>
---
+ Name: string
+ Colour: string
+ Stops: List<Stop>
}

class Models.RoutePlanner.UnprocessedRoute #Purple {
POCO used for importing routes from a file.
These only contain the stop names.
The Route type containing the Stop class is created 
when the resources are imported.
---
+ Route(string name, string colour, List<string> stops)
---
+ Name: string
+ Colour: string
+ Stops: List<string>
}

class Models.RoutePlanner.PlannedRoute #Purple {
Stores a possible route between an origin and destination
---
+ PlannedRoute()
---
+ OriginStop: Stop
+ DestinationStop: Stop
+ InterchangeStop: Stop
+ RouteFromOrigin: Route
+ RouteFromInterchange: Route
+ RequiresInterchange: bool
+ RouteDetails: string
}

class Models.RoutePlanner.RouteNotPossibleException  #Purple {
Thrown when a route between two stops 
cannot be generated
}

interface Models.RoutePlanner.IRoutePlanner #Purple {
Interface needed to be implemented for a 
route planner. 
---
+ FindRoute(Stop origin, Stop destination): List<PlannedRoute>
}


class Models.RoutePlanner.RoutePlanner #Purple {
Identifies a route between two stops
---
+ RoutePlanner(List<Route> routes)
---
+ FindRoute(Stop origin, Stop destination): List<PlannedRoute>
}

'Models.Services' 
package Models.Services {
Models.Services.FormattedServices *-- Models.Services.Tram 
Models.Services.FormattedServices *-- Models.Services.TramComparer 
Models.Services.ServiceRequester "Implements" --|> Models.Services.IRequester
Models.Services.ServiceRequester *-- Models.Services.UnformattedServices
Models.Services.ServiceFormatter *-- Models.Services.FormattedServices
Models.Services.ServiceProcessor *-- Models.Services.ServiceRequester
Models.Services.ServiceProcessor *-- Models.Services.ServiceFormatter
Models.Services.ServiceProcessor *-- Models.Stops.StopLookup
Models.Services.ServicesDataModel *-- Models.Services.ServiceProcessor
}

class Models.Services.ServicesDataModel #Yellow {
Data model that handles requests for service information.
---
+ ServicesDataModel(ImportedResources importedResources, IRequester requester)
---
+ RequestServices(string stop): FormattedServices
}

class Models.Services.Tram #Yellow{
Stores the information for a tram service, such as destination, carriages, wait
and status
---
+ Tram(string destination, string carriages, string status, string wait)
---
+ Destination: string
+ Carriages: string
+ Status: string
+ Wait: string
}

class Models.Services.FormattedServices #Yellow{
Formatted version of the services retrieved from the 
TfGM API.
---
+ Destinations: Dictionary<string, SortedSet<Tram>>
+ Messages: HashSet<string>
}

class Models.Services.TramComparer #Yellow {
IComparer responsible for ensuring Trams are 
stored in the correct order
---
+ Compare(Tram aTram, Tram bTram): int
}

interface Models.Services.IRequester #Yellow{
Interface for classes wanting to request services.
---
+ RequestServices(List<int> ids)
List<UnformattedServices> 
}

class Models.Services.UnformattedServices #Yellow {
Object for storing result of service
request from TfGM API. This mimics the
returned JSON.
---
+ Id: int
+ Line: string
+ Tlaref: string
+ Pidref: string
+ StationLocation: string
+ AtcoCode: string
+ Direction: string
+ Dest0: string
+ Carriages0: string 
+ Status0: string 
+ Wait0: string
+ Dest1: string 
+ Carriages1: string 
+ Status1: string
+ Wait1: string
+ Dest2: string
+ Carriages2: string
+ Status2: string
+ Wait2: string
+ Dest3: string
+ Carriages3: string
+ Status3: string
+ Wait3: string
+ MessageBoard: string
+ LastUpdated: string
}
class Models.Services.ServiceRequester #Yellow {
Requests service information from the TfGM API.
---
+ ServiceRequester(ApiOptions apiOptions)
---
+ RequestServices(List<int> ids): List<UnformattedServices> 
- RequestId(int id): Task<UnformattedServices> 
}

class Models.Services.ServiceFormatter #Yellow {
Takes a list of unformatted services, and converts them into a 
formatted object that is more useful for users
---
+ FormatServices(List<UnformattedServices> unformattedServices): FormattedServices 
- AddTram(FormattedServices formattedServices, Tram tram): void 
- FormatMessage(FormattedServices formattedServices, string message): void
}

class Models.Services.ServiceProcessor #Yellow {
Handles the requesting and formatting of TfGM service information 
---
+ ServiceProcessor(IRequester requester, ImportedResources resources)
+ RequestServices(string stop): FormattedServices 
} 

'Models.Stops'
package Models.Stops {
Models.Stops.StopLookup *-- Models.Stops.Stop
Models.Stops.StopLookup *-- Models.Stops.StopNotFoundException
}

class Models.Stops.StopsDataModel #Orange {
Data model for processing stops related requests.
---
+ StopsDataModel(ImportedResources importedResources)
---
GetStops(): List<Stop> 
}

class Models.Stops.StopLookup #Orange {
Looks up the Stop Information for a given stop name 
or TLAREF.
---
+ StopLookup(ImportedResources importedResources)
+ TlarefLookup(string tlaref): List<int> 
+ StationNameLookup(string stationName): List<int> 
+ LookupIDs(string value): List<int> 
+ IdentifyStop(string value): Stop
}

class Models.Stops.StopNotFoundException #Orange {
Exception thrown when a stop could not be identified
}

class Models.Stops.Stop #Orange{
POCO for storing Stop information 
---
+ StopName: string
+ Tlaref: string
+ Ids: ArrayList
+ AtcoCode: string
+ Latitude: string
+ Longitude: string
+ Street: string
+ RoadCrossing: string
+ Line: string
+ StopZone: string
}

'Models.Resources'
package Models.Resources {
Models.Resources.StopLoader "Uses" <--- Models.Resources.LoaderHelper
Models.Resources.StationNamesToTlarefLoader "Uses" <--- Models.Resources.LoaderHelper
Models.Resources.TlarefToIdsLoader "Uses" <--- Models.Resources.LoaderHelper
Models.Resources.RouteLoader "Uses" <--- Models.Resources.LoaderHelper
Models.Resources.StopLoader "Uses" <--- Models.Stops.Stop
Models.Resources.ResourceLoader *-- Models.Resources.ImportedResources
Models.Resources.ResourceLoader *-- Models.Resources.StopLoader
Models.Resources.ResourceLoader *-- Models.Resources.StationNamesToTlarefLoader
Models.Resources.ResourceLoader *-- Models.Resources.TlarefToIdsLoader
Models.Resources.ResourceLoader *-- Models.Resources.RouteLoader
Models.Resources.RouteLoader *-- Models.RoutePlanner.Route
Models.Resources.ResourceLoader *-- Models.Resources.ResourcesConfig
Models.Services.ServiceRequester *-- Models.Resources.ApiOptions 
}

class Models.Resources.ApiOptions #LightSkyBlue {
Stores API settings used when requesting data from the TfGM API.
---
+ OcpApimSubscriptionKey: String
}

class Models.Resources.LoaderHelper #LightSkyBlue {
Checks file requirements of resource files when loaded
---
+ CheckFileRequirements(string filePath, string argName): string
}

class Models.Resources.ImportedResources #LightSkyBlue {
Stores resources that have been loaded into the program
---
+ ImportedStops: List<Stop>
+ StationNamesToTlaref: Dictionary<string, string> 
+ TlarefsToIds: Dictionary<string, List<int>> 
+ ImportedRoutes: List<Route>
}

class Models.Resources.TlarefToIdsLoader #LightSkyBlue {
Loads the TlarefsToIds Dictionary
---
+ TlarefToIdsLoader(ResourcesConfig resourcesConfig)
+ Dictionary<string, List<int>> ImportTlarefsToIds(): Dictionary<string, List<int>> 
}

class Models.Resources.RouteLoader #LightSkyBlue {
Loads stored Route data
----
+ RouteLoader(ResourcesConfig resourcesConfig, List<Stop> stops)
+ ImportRoutes(): List<Route>
}

class Models.Resources.StationNamesToTlarefLoader #LightSkyBlue {
Loads the Station names to Tlarefs dictionary
---
+ StationNamesToTlarefLoader(ResourcesConfig resourcesConfig)
+ ImportStationNamesToTlarefs(): Dictionary<string, string> 
}

class Models.Resources.StopLoader #LightSkyBlue {
Loads stored data about stops
---
+ StopLoader(ResourcesConfig resourcesConfig)
+ ImportStops(): List<Stop> ImportStops()
} 

class Models.Resources.ResourceLoader #LightSkyBlue {
Loads the file resources for the system using the file loaders
---
+ ResourceLoader(ResourcesConfig resourcesConfig)
+ ImportResources(): ImportedResources
}

class Models.Resources.ResourcesConfig #LightSkyBlue {
+ StopResourcePath: string
+ StationNamesToTlarefsPath: string
+ TlarefsToIdsPath: string
+ RoutesResourcePath: string
+ DeepCopy(): ResourcesConfig
}

'Controllers
package Controllers {
Controllers.StopsController "Uses" <-- Models.Stops.StopsDataModel
Controllers.ServiceController "Uses" <-- Models.Services.ServicesDataModel
Controllers.RoutePlannerController "Uses" <-- Models.RoutePlanner.RoutePlannerDataModel
}

class Controllers.RoutePlannerController #HoneyDew {
Controller for handling requests for planning RoutesResourcePath
---
+ RoutePlannerController(IRoutePlannerDataModel)
---
+ FindRoute(string origin, string destination): IActionResult
}

class Controllers.ServiceController #HoneyDew{
Controller for handling requests for service information
---
+ ServiceController(IServiceDataModel serviceDataModel)
---
+ GetService(string stop): IActionResult 
}

class Controllers.StopsController #HoneyDew {
Controller for handling requests for stop information
---
+ StopsController(IStopsDataModel)
---
+ GetAllStops(): IActionResult 
}

@enduml
